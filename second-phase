import random
from fileinput import filename

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import math
import statistics as S



### defining the random variate generators


def triangle(a, b, c):
    r = random.random()
    if r < (b - a) / (c - a):
        R = math.sqrt(r * (b - a) * (c - a)) + a
    else:
        R = c - math.sqrt((1 - r) * (c - a) * (c - b))
    return R


def exponential(x):
    r = random.random()
    R = -(x) * math.log(1 - r)
    return R


def mw(state: object, clock):
    if state['weather'] == 1:
        if clock <= 120:
            R = 1
        elif clock <= 300:
            R = 0.5
        elif clock <= 420:
            R = 4
        else:
            R = 2
    else:
        if clock <= 120:
            R = 2
        elif clock <= 300:
            R = 3
        elif clock <= 420:
            R = 5
        else:
            R = 3
    return R


### defining starting state

def starting_state():
    state = dict()
    state['queue length'] = dict()
    state['queue length']['liq'] = 0
    state['queue length']['lpqp'] = 0
    state['queue length']['lpqa'] = 0
    state['queue length']['loq'] = 0
    state['queue length']['lfq'] = 0
    state['queue length']['leq'] = 0
    state['queue length']['lcq'] = 0
    state['queue length']['laq'] = 0
    state['server'] = dict()
    state['server']['si'] = 0
    state['server']['sf'] = 0
    state['server']['se'] = 0
    state['server']['sc'] = 0
    state['lc'] = 0
    r = random.random()
    state['weather'] = 1 if r > 1 / 3 else 0
    ### data collector
    data = dict()
    data['file'] = dict()
    data['last time queue changed'] = dict()
    data['last time queue changed']['liq'] = 0
    data['last time queue changed']['lpqp'] = 0
    data['last time queue changed']['lpqa'] = 0
    data['last time queue changed']['loq'] = 0
    data['last time queue changed']['lfq'] = 0
    data['last time queue changed']['leq'] = 0
    data['last time queue changed']['lcq'] = 0
    data['last time queue changed']['laq'] = 0

    data['empty queue'] = dict()
    data['empty queue']['parking'] = 0
    data['empty queue']['lfq'] = 0

    data['max length'] = dict()
    data['max length']['liq'] = 0
    data['max length']['lpqp'] = 0
    data['max length']['lpqa'] = 0
    data['max length']['loq'] = 0
    data['max length']['lfq'] = 0
    data['max length']['leq'] = 0
    data['max length']['lcq'] = 0
    data['max length']['laq'] = 0


    data['queue files'] = dict()
    data['queue files']['liq'] = dict()
    data['queue files']['lpqp'] = dict()
    data['queue files']['lpqa'] = dict()
    data['queue files']['loq'] = dict()
    data['queue files']['lfq'] = dict()
    data['queue files']['leq'] = dict()
    data['queue files']['lcq'] = dict()
    data['queue files']['laq'] = dict()

    data['cumulative stats'] = dict()
    data['cumulative stats']['server busy time'] = dict()
    data['cumulative stats']['server busy time']['si'] = 0
    data['cumulative stats']['server busy time']['sf'] = 0
    data['cumulative stats']['server busy time']['se'] = 0
    data['cumulative stats']['server busy time']['sc'] = 0

    data['cumulative stats']['queue waiting time'] = dict()
    data['cumulative stats']['queue waiting time']['liq'] = 0
    data['cumulative stats']['queue waiting time']['lpqp'] = 0
    data['cumulative stats']['queue waiting time']['lpqa'] = 0
    data['cumulative stats']['queue waiting time']['loq'] = 0
    data['cumulative stats']['queue waiting time']['lfq'] = 0
    data['cumulative stats']['queue waiting time']['leq'] = 0
    data['cumulative stats']['queue waiting time']['lcq'] = 0
    data['cumulative stats']['queue waiting time']['laq'] = 0
    #data['cumulative stats']['queue waiting time']['parking'] = 0

    data['cumulative stats']['area under queue length curve'] = dict()
    data['cumulative stats']['area under queue length curve']['liq'] = 0
    data['cumulative stats']['area under queue length curve']['lpqp'] = 0
    data['cumulative stats']['area under queue length curve']['lpqa'] = 0
    data['cumulative stats']['area under queue length curve']['loq'] = 0
    data['cumulative stats']['area under queue length curve']['lfq'] = 0
    data['cumulative stats']['area under queue length curve']['leq'] = 0
    data['cumulative stats']['area under queue length curve']['lcq'] = 0
    data['cumulative stats']['area under queue length curve']['laq'] = 0

    data['cumulative stats']['empty queue'] = dict()
    data['cumulative stats']['empty queue']['parking'] = 0
    data['cumulative stats']['empty queue']['lfq'] = 0
    #data['cumulative stats']['queue waiting time']['parking'] = 0


    data['cumulative stats']['service starters'] = dict()
    data['cumulative stats']['service starters']['si'] = 0
    data['cumulative stats']['service starters']['sf'] = 0
    data['cumulative stats']['service starters']['se'] = 0
    data['cumulative stats']['service starters']['sc'] = 0

    fel = list()
    fel.append({'event': 'arrival in pair', 'time': 0, 'file': 'p1'})
    fel.append({'event': 'arrival alone', 'time': exponential(mw(state, 1)), 'file': 'a1'})
    fel.append({'event': 'end time', 'time': 600, 'file': None})

    return state, fel, data


def fel_maker(fel, event, clock, file=None, state=None):
    time = 0
    if event == 'arrival in pair':
        time = clock + exponential(mw(state, clock) * 10 / 7)
    elif event == 'arrival alone':
        time = clock + exponential(mw(state, clock) * 10 / 3)
    elif event == 'arrival of the other car':
        time = clock + exponential(30)
    elif event == 'departure from photo shoot':
        time = clock + exponential(6)
    elif event == 'departure from file opening':
        time = clock + triangle(5, 6, 7)
    elif event == 'departure from inspection':
        time = clock + exponential(9)
    elif event == 'departure from complaining':
        time = clock + exponential(15)
    elif event == 'departure from file completion':
        time = clock + triangle(6, 8, 9)
    new_event = {'event': event, 'time': time, 'file': file}
    fel.append(new_event)


def arrival_in_pair(fel, state, clock, data, file):
    data['file'][file] = dict()
    data['file'][file]['arrival to section'] = dict()
    data['file'][file]['service begins'] = dict()
    data['file'][file]['pair'] = 1
    data['file'][file]['complain'] = 0
    data['file'][file]['arrival'] = clock
    data['file'][file]['end'] = 0
    if state['server']['si'] < 2:
        data['file'][file]['in'] = 1
        state['server']['si'] += 1
        fel_maker(fel, 'departure from photo shoot', clock, file, state)
        data['file'][file]['service begins']['si'] = clock
        # data['file'][file]['service ends']['si'] = clock + exponential(1)
        data['cumulative stats']['service starters']['si'] += 1
        data['file'][file]['arrival to section']['ps'] = clock

    elif state['server']['si'] >= 2:
        if state['queue length']['liq'] < 20:
            data['file'][file]['in'] = 1
            data['cumulative stats']['area under queue length curve']['liq'] += \
                state['queue length']['liq'] * (clock - data['last time queue changed']['liq'])
            state['queue length']['liq'] += 1
            data['max length']['liq'] = state['queue length']['liq'] if state['queue length']['liq'] > data['max length']['liq'] else data['max length']['liq']
            data['queue files']['liq'][file] = clock
            data['last time queue changed']['liq'] = clock
            data['file'][file]['arrival to section']['ps'] = clock
        else:
            data['file'][file]['in'] = 0
            data['file'][file]['arrival to section']['out'] = clock
            data['cumulative stats']['area under queue length curve']['loq'] += \
                state['queue length']['loq'] * (clock - data['last time queue changed']['loq'])
            data['queue files']['loq'][file] = clock
            state['queue length']['loq'] = len(list(data['queue files']['loq']))
            data['max length']['loq'] = state['queue length']['loq'] if state['queue length']['loq'] > data['max length']['loq'] else data['max length']['loq']
            data['last time queue changed']['loq'] = clock

    next_file = 'p' + str(int(file[1:]) + 1)
    fel_maker(fel, 'arrival in pair', clock, next_file, state)
    if fel[-1]['time'] > 600:
        del fel[-1]


def arrival_alone(fel, state, clock, data, file):
    data['file'][file] = dict()
    data['file'][file]['arrival to section'] = dict()
    data['file'][file]['service begins'] = dict()
    data['file'][file]['pair'] = 0
    data['file'][file]['complain'] = 0
    data['file'][file]['arrival'] = clock
    data['file'][file]['end'] = 0
    if state['queue length']['liq'] < 20:
        if state['queue length']['lpqp'] == 0 and state['queue length']['lpqa'] == 0:
            data['cumulative stats']['empty queue']['parking'] += clock - data['empty queue']['parking']
            data['empty queue']['parking'] = clock
        data['file'][file]['in'] = 1
        data['cumulative stats']['area under queue length curve']['lpqa'] += \
            state['queue length']['lpqa'] * (clock - data['last time queue changed']['lpqa'])
        data['queue files']['lpqa'][file] = clock
        state['queue length']['lpqa'] = len(list(data['queue files']['lpqa']))
        data['max length']['lpqa'] = state['queue length']['lpqa'] if state['queue length']['lpqa'] > data['max length'][
            'lpqa'] else data['max length']['lpqa']
        data['last time queue changed']['lpqa'] = clock
        data['file'][file]['arrival to section']['parking'] = clock
    else:
        data['file'][file]['in'] = 0
        data['cumulative stats']['area under queue length curve']['loq'] += \
            state['queue length']['loq'] * (clock - data['last time queue changed']['loq'])
        data['queue files']['loq'][file] = clock
        state['queue length']['loq'] = len(list(data['queue files']['loq']))
        data['max length']['loq'] = state['queue length']['loq'] if state['queue length']['loq'] > data['max length'][
            'loq'] else data['max length']['loq']
        data['last time queue changed']['loq'] = clock
        data['file'][file]['arrival to section']['out'] = clock
    fel_maker(fel, 'arrival of the other car', clock, file, state)
    next_file = 'a' + str(int(file[1:]) + 1)
    fel_maker(fel, 'arrival alone', clock, next_file, state)
    if fel[-1]['time'] > 600:
        del fel[-1]


def departure_from_photo_shoot(fel, state, clock, data, file):
    # arrive to file opening
    data['cumulative stats']['server busy time']['si'] += clock - data['file'][file]['service begins']['si']
    data['file'][file]['arrival to section']['sf'] = clock
    if state['server']['sf'] < 3:
        state['server']['sf'] += 1
        fel_maker(fel, 'departure from file opening', clock, file, state)
        data['file'][file]['service begins']['sf'] = clock
        # data['file'][file]['service ends']['sf'] = clock + exponential(1)
        data['cumulative stats']['service starters']['sf'] += 1
    else:
        if state['queue length']['lfq'] == 0:
            data['cumulative stats']['empty queue']['lfq'] += clock - data['empty queue']['lfq']
            data['empty queue']['lfq'] = clock
        data['cumulative stats']['area under queue length curve']['lfq'] += \
            state['queue length']['lfq'] * (clock - data['last time queue changed']['lfq'])
        data['queue files']['lfq'][file] = clock
        state['queue length']['lfq'] = len(list(data['queue files']['lfq']))
        data['max length']['lfq'] = state['queue length']['lfq'] if state['queue length']['lfq'] > data['max length'][
            'lfq'] else data['max length']['lfq']
        data['last time queue changed']['lfq'] = clock
    # next person in ps queue
    if state['queue length']['liq'] <= 0:
        state['server']['si'] -= 1
    else:
        first_file_in_liq = min(data['queue files']['liq'], key=data['queue files']['liq'].get)
        data['file'][first_file_in_liq]['service begins']['si'] = clock
        data['cumulative stats']['queue waiting time']['liq'] += clock - data['file'][first_file_in_liq]['arrival to section']['ps']
        fel_maker(fel, 'departure from photo shoot', clock, first_file_in_liq, state)
        data['cumulative stats']['service starters']['si'] += 1
        data['queue files']['liq'].pop(first_file_in_liq, None)
        if state['queue length']['lpqp'] > 0:
            first_in_parking = min(data['queue files']['lpqp'], key=data['queue files']['lpqp'].get)
            data['file'][first_in_parking]['arrival to section']['ps'] = clock
            data['cumulative stats']['queue waiting time']['lpqp'] += \
                clock - data['file'][first_in_parking]['arrival to section']['parking']
            data['cumulative stats']['area under queue length curve']['lpqp'] += \
                state['queue length']['lpqp'] * (clock - data['last time queue changed']['lpqp'])
            data['queue files']['liq'][first_in_parking] = clock
            data['queue files']['lpqp'].pop(first_in_parking, None)
            if state['queue length']['lpqp'] == 0 and state['queue length']['lpqa'] == 0:
                data['empty queue']['parking'] = clock
            state['queue length']['lpqp'] = len(list(data['queue files']['lpqp']))
            data['last time queue changed']['lpqp'] = clock

        elif state['queue length']['lpqp'] <= 0:
            if state['queue length']['loq'] <= 0:
                data['cumulative stats']['area under queue length curve']['liq'] += \
                    state['queue length']['liq'] * (clock - data['last time queue changed']['liq'])
                state['queue length']['liq'] = len(list(data['queue files']['liq']))
                data['last time queue changed']['liq'] = clock
            else:
                loq_list = list(data['queue files']['loq'])
                loq_list = sorted(loq_list, key=lambda x: x)
                for i in range(state['queue length']['loq']):
                    first_in_out = loq_list[i]
                    if data['file'][first_in_out]['pair'] > 0:
                        data['file'][first_in_out]['arrival to section']['ps'] = clock
                        data['cumulative stats']['queue waiting time']['loq'] += \
                            clock - data['file'][first_in_out]['arrival']
                        data['file'][file]['in'] = 1
                        data['cumulative stats']['area under queue length curve']['loq'] += \
                            state['queue length']['loq'] * (clock - data['last time queue changed']['loq'])
                        data['queue files']['liq'][first_in_out] = clock
                        data['queue files']['loq'].pop(first_in_out, None)
                        state['queue length']['loq'] = len(list(data['queue files']['loq']))
                        data['last time queue changed']['loq'] = clock
                        data['file'][first_in_out]['arrival to section']['ps'] = clock
                        break

                    elif data['file'][first_in_out]['pair'] <= 0:
                        data['cumulative stats']['queue waiting time']['loq'] += \
                            clock - data['file'][first_in_out]['arrival']
                        data['cumulative stats']['area under queue length curve']['loq'] += \
                            state['queue length']['loq'] * (clock - data['last time queue changed']['loq'])
                        data['queue files']['lpqa'][first_in_out] = clock
                        data['queue files']['loq'].pop(first_in_out, None)
                        if state['queue length']['lpqp'] == 0 and state['queue length']['lpqa'] == 0:
                            data['empty queue']['parking'] = clock
                        state['queue length']['loq'] = len(list(data['queue files']['loq']))
                        data['last time queue changed']['loq'] = clock
                        data['file'][first_in_out]['in'] = 1
                        data['cumulative stats']['area under queue length curve']['lpqa'] += \
                            state['queue length']['lpqa'] * (clock - data['last time queue changed']['lpqa'])
                        data['queue files']['lpqa'][first_in_out] = clock
                        state['queue length']['lpqa'] = len(list(data['queue files']['lpqa']))
                        data['max length']['lpqa'] = state['queue length']['lpqa'] if state['queue length']['lpqa'] > data['max length']['lpqa'] else data['max length']['lpqa']
                        data['last time queue changed']['lpqa'] = clock
                        data['file'][first_in_out]['arrival to section']['parking'] = clock
                ####


def departure_of_file_opening(fel, state, clock, data, file):
    # arrive to inspection
    data['cumulative stats']['server busy time']['sf'] += clock - data['file'][file]['service begins']['sf']
    data['file'][file]['arrival to section']['se'] = clock
    if state['server']['se'] < 2:
        state['server']['se'] += 1
        fel_maker(fel, 'departure from inspection', clock, file, state)
        data['file'][file]['service begins']['se'] = clock
        data['cumulative stats']['service starters']['se'] += 1
    else:
        data['cumulative stats']['area under queue length curve']['leq'] += \
            state['queue length']['leq'] * (clock - data['last time queue changed']['leq'])
        state['queue length']['leq'] += 1
        data['max length']['leq'] = state['queue length']['leq'] if state['queue length']['leq'] > data['max length']['leq'] else data['max length']['leq']
        data['queue files']['leq'][file] = clock
        data['last time queue changed']['leq'] = clock
    # filing queue
    if len(list(data['queue files']['laq'])) >= 1:
        first_file_in_laq = min(data['queue files']['laq'], key=data['queue files']['laq'].get)
        data['file'][first_file_in_laq]['service begins']['sfc'] = clock
        data['cumulative stats']['queue waiting time']['laq'] += \
            clock - data['file'][first_file_in_laq]['arrival to section']['sfc']
        fel_maker(fel, 'departure from file completion', clock, first_file_in_laq, state)
        data['cumulative stats']['service starters']['sf'] += 1
        data['queue files']['laq'].pop(first_file_in_laq, None)
        state['queue length']['laq'] -= 1
    elif len(list(data['queue files']['laq'])) < 1:
        if state['queue length']['lfq'] > 0:
            first_file_in_lfq = min(data['queue files']['lfq'], key=data['queue files']['lfq'].get)
            data['file'][first_file_in_lfq]['service begins']['sf'] = clock
            data['cumulative stats']['queue waiting time']['lfq'] += \
                clock - data['file'][first_file_in_lfq]['arrival to section']['sf']
            fel_maker(fel, 'departure from file opening', clock, first_file_in_lfq, state)
            data['cumulative stats']['service starters']['sf'] += 1
            data['queue files']['lfq'].pop(first_file_in_lfq, None)
            state['queue length']['lfq'] -= 1
            if state['queue length']['lfq'] == 0:
                data['empty queue']['lfq'] = clock
        else:
            state['server']['sf'] -= 1


def departure_from_inspection(fel, state, clock, data, file):
    data['cumulative stats']['server busy time']['se'] += clock - data['file'][file]['service begins']['se']
    # arrival to another section
    r = random.random()
    if data['file'][file]['complain'] == 1:
        r = 0.5
    else:
        r = random.random()
    if r > 0.1 :
        # file goes to file completion section
        data['file'][file]['arrival to section']['sfc'] = clock
        if state['server']['sf'] < 3:
            state['server']['sf'] += 1
            fel_maker(fel, 'departure from file completion', clock, file, state)
            data['file'][file]['service begins']['sfc'] = clock
            # data['file'][file]['service ends']['sf'] = clock + exponential(1)
            data['cumulative stats']['service starters']['sf'] += 1
        else:
            data['cumulative stats']['area under queue length curve']['laq'] += \
                state['queue length']['laq'] * (clock - data['last time queue changed']['laq'])
            data['queue files']['laq'][file] = clock
            state['queue length']['laq'] += 1
            data['max length']['laq'] = state['queue length']['laq'] if state['queue length']['laq'] > data['max length']['laq'] else data['max length']['laq']
            data['last time queue changed']['laq'] = clock
    else:
        data['file'][file]['arrival to section']['complaining'] = clock
        data['file'][file]['complain'] = 1
        if state['server']['sc'] == 0:
            state['server']['sc'] += 1
            fel_maker(fel, 'departure from complaining', clock, file, state)
            data['file'][file]['service begins']['sc'] = clock
            # data['file'][file]['service ends']['sc'] = clock + exponential(1)
            data['cumulative stats']['service starters']['sc'] += 1
        else:
            data['cumulative stats']['area under queue length curve']['lcq'] += \
                state['queue length']['lcq'] * (clock - data['last time queue changed']['lcq'])
            state['queue length']['lcq'] += 1
            data['max length']['lcq'] = state['queue length']['lcq'] if state['queue length']['lcq'] > data['max length']['lcq'] else data['max length']['lcq']
            data['queue files']['lcq'][file] = clock
            data['last time queue changed']['lcq'] = clock
#here asshole
    # inspection queue
    if state['queue length']['leq'] > 0:
        first_file_in_leq = min(data['queue files']['leq'], key=data['queue files']['leq'].get)
        data['file'][first_file_in_leq]['service begins']['se'] = clock
        data['cumulative stats']['queue waiting time']['leq'] += \
            clock - data['file'][first_file_in_leq]['arrival to section']['se']
        fel_maker(fel, 'departure from inspection', clock, first_file_in_leq, state)
        data['cumulative stats']['service starters']['sf'] += 1
        data['queue files']['leq'].pop(first_file_in_leq, None)
        state['queue length']['leq'] -= 1

    else:
        state['server']['se'] -= 1


def departure_from_complaining(fel, state, clock, data, file):
    #arrive to inspection
    data['cumulative stats']['server busy time']['sc'] += clock - data['file'][file]['service begins']['sc']
    if state['server']['se'] < 2:
        state['server']['se'] += 1
        fel_maker(fel, 'departure from inspection', clock, file, state)
        data['file'][file]['arrival to section']['se'] = clock
        data['file'][file]['service begins']['se'] = clock
        # data['file'][file]['service ends']['sf'] = clock + exponential(1)
        data['cumulative stats']['service starters']['se'] += 1
    else:
        data['cumulative stats']['area under queue length curve']['leq'] += \
            state['queue length']['leq'] * (clock - data['last time queue changed']['leq'])
        state['queue length']['leq'] += 1
        data['queue files']['leq'][file] = clock
        data['max length']['leq'] = state['queue length']['leq'] if state['queue length']['leq'] > data['max length']['leq'] else data['max length']['leq']
        data['last time queue changed']['leq'] = clock

    #arrival of next file to complaining
    if state['queue length']['lcq'] == 0:
        state['server']['sc'] -= 1
    else:
        first_file_in_lcq = min(data['queue files']['lcq'], key=data['queue files']['lcq'].get)
        data['file'][first_file_in_lcq]['service begins']['sc'] = clock
        data['cumulative stats']['queue waiting time']['lcq'] += \
            clock - data['file'][first_file_in_lcq]['arrival to section']['se']
        fel_maker(fel, 'departure from complaining', clock, first_file_in_lcq, state)
        data['file'][first_file_in_lcq]['service begins']['sc'] = clock
        data['cumulative stats']['service starters']['sc'] += 1
        data['queue files']['lcq'].pop(first_file_in_lcq, None)
    state['queue length']['lcq'] = len(list(data['queue files']['lcq']))


def file_completion(fel, state, clock, data, file):
    data['cumulative stats']['server busy time']['sf'] += clock - data['file'][file]['service begins']['sfc']
    data['file'][file]['end'] = clock
    data['file'][file]['sys'] = data['file'][file]['end'] - data['file'][file]['arrival']

    if len(list(data['queue files']['laq'])) >= 1:
        first_file_in_laq = min(data['queue files']['laq'], key=data['queue files']['laq'].get)
        data['file'][first_file_in_laq]['service begins']['sfc'] = clock
        data['cumulative stats']['queue waiting time']['laq'] += \
            clock - data['file'][first_file_in_laq]['arrival to section']['sfc']
        fel_maker(fel, 'departure from file completion', clock, first_file_in_laq, state)
        data['cumulative stats']['service starters']['sf'] += 1
        data['queue files']['laq'].pop(first_file_in_laq, None)
        state['queue length']['laq'] -= 1
    elif len(list(data['queue files']['laq'])) < 1:
        if state['queue length']['lfq'] > 0:
            first_file_in_lfq = min(data['queue files']['lfq'], key=data['queue files']['lfq'].get)
            data['file'][first_file_in_lfq]['service begins']['sf'] = clock
            data['cumulative stats']['queue waiting time']['lfq'] += \
                clock - data['file'][first_file_in_lfq]['arrival to section']['sf']
            fel_maker(fel, 'departure from file opening', clock, first_file_in_lfq, state)
            data['cumulative stats']['service starters']['sf'] += 1
            data['queue files']['lfq'].pop(first_file_in_lfq, None)
            state['queue length']['lfq'] -= 1
        else:
            state['server']['sf'] -= 1


def arrival_of_the_other_car(fel, state, clock, data, file):
    if data['file'][file]['in'] == 1:
        data['file'][file]['pair'] = 1
        data['cumulative stats']['area under queue length curve']['lpqa'] += \
            state['queue length']['lpqa'] * (clock - data['last time queue changed']['lpqa'])
        data['cumulative stats']['queue waiting time']['lpqa'] += \
            clock - data['file'][file]['arrival to section']['parking']
        state['queue length']['lpqa'] -= 1
        data['last time queue changed']['lpqa'] = clock
        data['queue files']['lpqa'].pop(file, None)
        if state['queue length']['lpqp'] == 0 and state['queue length']['lpqa'] == 0:
            data['empty queue']['parking'] = clock
        if state['server']['si'] < 2:
            #data['cumulative stats']['queue waiting time']['parking'] += clock - data['file'][file]['arrival to section']['parking']
            data['file'][file]['arrival to section']['ps'] = clock
            state['server']['si'] += 1
            fel_maker(fel, 'departure from photo shoot', clock, file, state)
            data['file'][file]['service begins']['si'] = clock
            # data['file'][file]['service ends']['si'] = clock + exponential(1)
            data['cumulative stats']['service starters']['si'] += 1

        else:
            if state['queue length']['liq'] < 20:
                data['cumulative stats']['area under queue length curve']['liq'] += \
                    state['queue length']['liq'] * (clock - data['last time queue changed']['liq'])
                state['queue length']['liq'] += 1
                data['queue files']['liq'][file] = clock
                data['max length']['liq'] = state['queue length']['liq'] if state['queue length']['liq'] > data['max length']['liq'] else data['max length']['liq']
                data['last time queue changed']['liq'] = clock
                data['file'][file]['arrival to section']['ps'] = clock
            else:
                data['cumulative stats']['area under queue length curve']['lpqp'] += \
                    state['queue length']['lpqp'] * (clock - data['last time queue changed']['lpqp'])
                state['queue length']['lpqp'] += 1
                data['max length']['lpqp'] = state['queue length']['lpqp'] if state['queue length']['lpqp'] > data['max length']['lpqp'] else data['max length']['lpqp']
                data['queue files']['lpqp'][file] = clock
                data['last time queue changed']['lpqp'] = clock
    else:
        data['file'][file]['pair'] = 1



def end_clock(fel, state, clock, data):
    state['lc'] += state['queue length']['loq']
    data['cumulative stats']['area under queue length curve']['loq'] += \
        state['queue length']['loq'] * (clock - data['last time queue changed']['loq'])
    state['queue length']['loq'] = 0
    data['last time queue changed']['loq'] = clock
    for i in data['queue files']['loq'].keys():
        if data['file'][i]['pair'] == 0:
            for j in range(len(fel)-1):
                if fel[j]['file'] == i:
                    if fel[j]['event'] == 'arrival of the other car':
                        fel.pop(j)
    data['queue files']['loq'].clear()









def create_row(step, event, state, data, fel, t):
    # This function will create a list, which will eventually become a row of the output Excel file

    sorted_fel = sorted(fel, key=lambda x: x['time'])

    # What should this row contain?
    # 1. Step, Clock, Event Type and Event Customer
    row = [step, t, event['time'], event['event'], event['file']]
    # 2. All state variables
    row.extend(list(state['queue length'].values()))
    row.extend(list(state['server'].values()))
    row.append(state['lc'])
    row.append(state['weather'])
    # 3. All Cumulative Stats
    row.extend(list(data['cumulative stats']['server busy time'].values()))
    row.extend(list(data['cumulative stats']['queue waiting time'].values()))
    row.extend(list(data['cumulative stats']['area under queue length curve'].values()))
    row.extend(list(data['cumulative stats']['service starters'].values()))
    #row = [step, event['event'], event['time'], state['queue length'], state['server'], data['cumulative stats']['server busy time'], data['cumulative stats']['queue waiting time'], data['cumulative stats']['area under queue length curve'], data['cumulative stats']['service starters'],event['file']]

    # 4. All events in fel ('Event Time', 'Event Type' & 'Event Customer' for each event)
    for event in sorted_fel:
        row.append(event['time'])
        row.append(event['event'])
        row.append(event['file'])
    return row

def justify(table):
    row_max_len = 0
    for row in table:
        if len(row) > row_max_len:
            row_max_len = len(row)

    for row in table:
        row.extend([""] * (row_max_len - len(row)))


def create_main_header(state, data, t):
    # the components of header:
    # 1. Step, Clock, Event Type, and Event Customer
    # header = ['Step', 'Event Type','Clock','queue length liq','queue length lpqp','queue length lpqa','queue length loq','queue length lfq','queue length leq','queue length lcq','queue length laq','si','sf','se','sc','server busy time si','server busy time sf','server busy time se','server busy time sc','queue waiting time liq','queue waiting time lpqp','queue waiting time lpqa','queue waiting time loq','queue waiting time lfq','queue waiting time leq','queue waiting time lcq','queue waiting time laq','queue waiting time parking','area under queue length curve liq','area under queue length curve lpqp','area under queue length curve lpqa','area under queue length curve loq','area under queue length curve lfq','area under queue length curve leq','area under queue length curve lcq','area under queue length curve laq','service starters si','service starters sf','service starters se','service starters sc', 'Customer']
    header = ['Step','day','Clock','Event Type', 'file']
    # 2. Name of the state variables
    # header.extend(list(state.keys()))
    # 3. Name of cumulative stats
    # header.extend(list(data['cumulative stats'].keys()))

    header.extend(list(state['queue length'].keys()))
    header.extend(list(state['server'].keys()))
    header.append('lc')
    header.append('weather')

    # row.extend(list(state['lc']))
    # row.extend(list(state['weather']))
    # 3. All Cumulative Stats
    header.extend(list(data['cumulative stats']['server busy time'].keys()))
    header.extend(list(data['cumulative stats']['queue waiting time'].keys()))
    header.extend(list(data['cumulative stats']['area under queue length curve'].keys()))
    header.extend(list(data['cumulative stats']['service starters'].keys()))
    return header


# creating and fine-tuning the output Excel file
def create_excel(table, header, t):
    row_len = len(list(table[0]))
    header_len = len(header)

    # length of header exceeds length of header by (max_fel_length * 3) (Event Type, Event Time & Customer for each event in FEL)
    # extending the header
    i = 1
    for col in range((row_len - header_len) // 3):
        header.append('Future Event Time ' + str(i))
        header.append('Future Event Type ' + str(i))
        header.append('Future Customer ' + str(i))
        i += 1

    # creating a pandas DataFrame and writing out the Excel file to the hard drive
    df = pd.DataFrame(table, columns= header, index=None)
    writer = pd.ExcelWriter('Output2.xlsx', engine='xlsxwriter')
    df.to_excel(writer, sheet_name=str(t), header=False, startrow=1, index=False)

    # accessing the respective workbook and sheet
    workbook = writer.book
    worksheet = writer.sheets[str(t)]

    # formatting the header
    header_formatter = workbook.add_format()
    header_formatter.set_align('center')
    header_formatter.set_align('vcenter')
    header_formatter.set_font('Times New Roman')
    header_formatter.set_bold('True')

    for col_num, value in enumerate(df.columns.values):
        worksheet.write(0, col_num, value, header_formatter)

    # auto-fitting columns
    for i, width in enumerate(get_col_widths(df)):
        worksheet.set_column(i - 1, i - 1, width)

    # formatting the body
    main_formatter = workbook.add_format()
    main_formatter.set_align('center')
    main_formatter.set_align('vcenter')
    main_formatter.set_font('Times New Roman')

    for row in range(1, len(df) + 1):
        worksheet.set_row(row, None, main_formatter)

    writer.close()



# concatenate the max length of the index column to the max length of column titles and values, left to right
def get_col_widths(dataframe):
    idx_max = max([len(str(s)) for s in dataframe.index.values] + [len(str(dataframe.index.name))])
    return [idx_max] + [max([len(str(s)) for s in dataframe[col].values] + [len(col)]) for col in dataframe.columns]



def end_of_simulation(data: dict, clock: list):

    Var = dict()
    raw_data = {}
    avg_max_length = dict()
    avg_max_length['liq'] = []
    avg_max_length['lpqp'] = []
    avg_max_length['lpqa'] = []
    avg_max_length['loq'] = []
    avg_max_length['lfq'] = []
    avg_max_length['leq'] = []
    avg_max_length['lcq'] = []
    avg_max_length['laq'] = []
    for i in range(len(data) - 1):
        avg_max_length['liq'].append(data[i]['max length']['liq'])
        avg_max_length['lpqp'].append(data[i]['max length']['lpqp'])
        avg_max_length['lpqa'].append(data[i]['max length']['lpqa'])
        avg_max_length['loq'].append(data[i]['max length']['loq'])
        avg_max_length['lfq'].append(data[i]['max length']['lfq'])
        avg_max_length['leq'].append(data[i]['max length']['leq'])
        avg_max_length['lcq'].append(data[i]['max length']['lcq'])
        avg_max_length['laq'].append(data[i]['max length']['laq'])

    raw_data['max_length'] = dict()
    raw_data['max_length']['liq'] = avg_max_length['liq']
    avg_max_length['liq'] = S.mean(avg_max_length['liq'])
    avg_max_length['lpqa'] = S.mean(avg_max_length['lpqa'])
    avg_max_length['lpqp'] = S.mean(avg_max_length['lpqp'])
    avg_max_length['loq'] = S.mean(avg_max_length['loq'])
    raw_data['max_length']['lfq'] = avg_max_length['lfq']
    avg_max_length['lfq'] = S.mean(avg_max_length['lfq'])
    raw_data['max_length']['leq'] = avg_max_length['leq']
    avg_max_length['leq'] = S.mean(avg_max_length['leq'])
    avg_max_length['lcq'] = S.mean(avg_max_length['lcq'])
    raw_data['max_length']['laq'] = avg_max_length['laq']
    avg_max_length['laq'] = S.mean(avg_max_length['laq'])

    server_efficiency = dict()
    server_efficiency['si'] = []
    server_efficiency['sf'] = []
    server_efficiency['se'] = []
    server_efficiency['sc'] = []
    for i in range(len(data) - 1):
        server_efficiency['si'].append((data[i]['cumulative stats']['server busy time']['si']) / (clock[i] * 2))
        server_efficiency['sf'].append((data[i]['cumulative stats']['server busy time']['sf']) / (clock[i] * 3))
        server_efficiency['se'].append((data[i]['cumulative stats']['server busy time']['se']) / (clock[i] * 2))
        server_efficiency['sc'].append((data[i]['cumulative stats']['server busy time']['sc']) / clock[i])
    Var['server'] = dict()
    raw_data['server efficiency'] = dict()
    Var['server']['si'] = S.variance(server_efficiency['si'])
    raw_data['server efficiency']['si'] = server_efficiency['si']
    server_efficiency['si'] = S.mean(server_efficiency['si'])
    Var['server']['sf'] = S.variance(server_efficiency['sf'])
    raw_data['server efficiency']['sf'] = server_efficiency['sf']
    server_efficiency['sf'] = S.mean(server_efficiency['sf'])
    Var['server']['se'] = S.variance(server_efficiency['se'])
    raw_data['server efficiency']['sf'] = server_efficiency['se']
    server_efficiency['se'] = S.mean(server_efficiency['se'])
    server_efficiency['sc'] = S.mean(server_efficiency['sc'])

    avg_length = dict()
    avg_length['liq'] = []
    avg_length['lpqp'] = []
    avg_length['lpqa'] = []
    avg_length['loq'] = []
    avg_length['lfq'] = []
    avg_length['leq'] = []
    avg_length['lcq'] = []
    avg_length['laq'] = []
    for i in range(len(data) - 1):
        avg_length['liq'].append(data[i]['cumulative stats']['area under queue length curve']['liq'] / clock[i])
        avg_length['lpqp'].append(data[i]['cumulative stats']['area under queue length curve']['lpqp'] / clock[i])
        avg_length['lpqa'].append(data[i]['cumulative stats']['area under queue length curve']['lpqa'] / clock[i])
        avg_length['loq'].append(data[i]['cumulative stats']['area under queue length curve']['loq'] / clock[i])
        avg_length['lfq'].append(data[i]['cumulative stats']['area under queue length curve']['lfq'] / clock[i])
        avg_length['leq'].append(data[i]['cumulative stats']['area under queue length curve']['leq'] / clock[i])
        avg_length['lcq'].append(data[i]['cumulative stats']['area under queue length curve']['lcq'] / clock[i])
        avg_length['laq'].append(data[i]['cumulative stats']['area under queue length curve']['laq'] / clock[i])
    Var['length'] = dict()
    raw_data['queue length'] = dict()
    Var['length']['liq'] = S.variance(avg_length['liq'])
    raw_data['queue length']['liq'] = avg_length['liq']
    avg_length['liq'] = S.mean(avg_length['liq'])
    avg_length['lpqp'] = S.mean(avg_length['lpqp'])
    avg_length['lpqa'] = S.mean(avg_length['lpqa'])
    avg_length['loq'] = S.mean(avg_length['loq'])
    Var['length']['lfq'] = S.variance(avg_length['lfq'])
    raw_data['queue length']['lfq'] = avg_length['lfq']
    avg_length['lfq'] = S.mean(avg_length['lfq'])
    Var['length']['leq'] = S.variance(avg_length['leq'])
    raw_data['queue length']['leq'] = avg_length['leq']
    avg_length['leq'] = S.mean(avg_length['leq'])
    avg_length['lcq'] = S.mean(avg_length['lcq'])
    Var['length']['laq'] = S.variance(avg_length['laq'])
    raw_data['queue length']['laq'] = avg_length['laq']
    avg_length['laq'] = S.mean(avg_length['laq'])

    avg_waiting = dict()
    avg_waiting['liq'] = []
    avg_waiting['lpqp'] = []
    avg_waiting['lpqa'] = []
    avg_waiting['loq'] = []
    avg_waiting['lfq'] = []
    avg_waiting['leq'] = []
    avg_waiting['lcq'] = []
    avg_waiting['laq'] = []
    for i in range(len(data) - 1):
        avg_waiting['liq'].append(data[i]['cumulative stats']['queue waiting time']['liq']/len(data[i]['file']))
        avg_waiting['lpqp'].append(data[i]['cumulative stats']['queue waiting time']['lpqp']/len(data[i]['file']))
        avg_waiting['lpqa'].append(data[i]['cumulative stats']['queue waiting time']['lpqa']/len(data[i]['file']))
        avg_waiting['loq'].append(data[i]['cumulative stats']['queue waiting time']['loq']/len(data[i]['file']))
        avg_waiting['lfq'].append(data[i]['cumulative stats']['queue waiting time']['lfq']/len(data[i]['file']))
        avg_waiting['leq'].append(data[i]['cumulative stats']['queue waiting time']['leq']/len(data[i]['file']))
        avg_waiting['lcq'].append(data[i]['cumulative stats']['queue waiting time']['lcq']/len(data[i]['file']))
        avg_waiting['laq'].append(data[i]['cumulative stats']['queue waiting time']['laq']/len(data[i]['file']))
    Var['wait'] = dict()
    raw_data['waiting time'] = dict()
    Var['wait']['liq'] = S.variance(avg_waiting['liq'])
    raw_data['waiting time']['liq'] = avg_waiting['liq']
    avg_waiting['liq'] = S.mean(avg_waiting['liq'])
    avg_waiting['lpqp'] = S.mean(avg_waiting['lpqp'])
    avg_waiting['lpqa'] = S.mean(avg_waiting['lpqa'])
    avg_waiting['loq'] = S.mean(avg_waiting['loq'])
    Var['wait']['lfq'] = S.variance(avg_waiting['lfq'])
    raw_data['waiting time']['lfq'] = avg_waiting['lfq']
    avg_waiting['lfq'] = S.mean(avg_waiting['lfq'])
    Var['wait']['leq'] = S.variance(avg_waiting['leq'])
    raw_data['waiting time']['leq'] = avg_waiting['leq']
    avg_waiting['leq'] = S.mean(avg_waiting['leq'])
    avg_waiting['lcq'] = S.mean(avg_waiting['lcq'])
    Var['wait']['laq'] = S.variance(avg_waiting['laq'])
    raw_data['waiting time']['laq'] = avg_waiting['laq']
    avg_waiting['laq'] = S.mean(avg_waiting['laq'])
    avg_sys_waiting = []
    #not important
    for i in range(len(data) - 1):
        for j in range(len(data[i]['file'])):
            p = list(data[i]['file'])
            avg_sys_waiting.append(data[i]['file'][p[j]]['end'] - data[i]['file'][p[j]]['arrival'])
    res = [i for i in avg_sys_waiting if i > 0]
    max_sys_waiting = max(res)
    var_waiting = S.variance(res)
    avg_sys_waiting = S.mean(res)

    avg_empty = dict()
    avg_empty['parking'] = []
    avg_empty['lfq'] = []
    for i in range(len(data) - 1):
        avg_empty['parking'].append((data[i]['cumulative stats']['empty queue']['parking'])/clock[i])
        avg_empty['lfq'].append((data[i]['cumulative stats']['empty queue']['lfq'])/clock[i])
    avg_empty['parking'] = S.mean(avg_empty['parking'])
    avg_empty['lfq'] = S.mean(avg_empty['lfq'])
    data = {'avg_empty': avg_empty, 'avg_length': avg_length, 'avg_sys_waiting': avg_sys_waiting, 'avg_waiting': avg_waiting, 'avg_max_length' : avg_max_length, 'server_efficiency': server_efficiency, 'var': Var,
            'raw data': raw_data}

    return data




def metrics(sys1):
    avg_length1 = [['Photo Shoot Queue', 'Filing Queue', 'Inspection Queue', 'File Completion Queue', 'Complaints Queue', 'Outside Queue', 'Parking pairs Queue','Parking Alone Queue'],
                   [sys1['avg_length']['liq'], sys1['avg_length']['lfq'], sys1['avg_length']['leq'], sys1['avg_length']['laq'], sys1['avg_length']['lcq'], sys1['avg_length']['loq'],
                    sys1['avg_length']['lpqp'], sys1['avg_length']['lpqa']]]

    avg_length1 = np.array(avg_length1)
    avg_length_df = pd.DataFrame(avg_length1)
    avg_length_df.columns = avg_length_df.iloc[0]
    avg_length_df = avg_length_df[1:]
    print('Average Queue Length\n', avg_length_df.to_markdown(),'\n')

    avg_wait1 = [['Photo Shoot Queue', 'Filing Queue', 'Inspection Queue', 'File Completion Queue', 'Complaints Queue', 'Outside Queue', 'Parking pairs Queue','Parking Alone Queue'],
                 [sys1['avg_waiting']['liq'], sys1['avg_waiting']['lfq'], sys1['avg_waiting']['leq'], sys1['avg_waiting']['laq'], sys1['avg_waiting']['lcq'], sys1['avg_waiting']['loq'],
                    sys1['avg_waiting']['lpqp'], sys1['avg_waiting']['lpqa']]]
    avg_wait1 = np.array(avg_wait1)
    avg_wait_df = pd.DataFrame(avg_wait1)
    avg_wait_df.columns = avg_wait_df.iloc[0]
    avg_wait_df = avg_wait_df[1:]

    print('Average Waiting Time\n', avg_wait_df.to_markdown(), '\n')

    avg_server1 = [['Photo Shoot Server', 'Filing Server', 'Inspection Server', 'Complaints Server'],
                   [sys1['server_efficiency']['si'], sys1['server_efficiency']['sf'], sys1['server_efficiency']['se'], sys1['server_efficiency']['sc']]]
    avg_server1 = np.array(avg_server1)
    avg_server_df = pd.DataFrame(avg_server1)
    avg_server_df.columns = avg_server_df.iloc[0]
    avg_server_df = avg_server_df[1:]

    print('Server Efficiency\n', avg_server_df.to_markdown(), '\n')

    max_length = np.array([['Photo Shoot Queue', 'Filing Queue', 'Inspection Queue', 'File Completion Queue', 'Complaints Queue', 'Outside Queue', 'Parking pairs Queue','Parking Alone Queue'],
                  [sys1['avg_max_length']['liq'], sys1['avg_max_length']['lfq'],sys1['avg_max_length']['leq'],sys1['avg_max_length']['laq'],sys1['avg_max_length']['lcq'],
                   sys1['avg_max_length']['loq'],sys1['avg_max_length']['lpqp'],sys1['avg_max_length']['lpqa']]])
    max_length = pd.DataFrame(max_length)
    max_length.columns = max_length.iloc[0]
    max_length = max_length[1:]

    print('Max Queue Length\n', max_length.to_markdown(),'\n')

    empty = np.array([['empty parking prob', 'empty filing queue prob'],[sys1['avg_empty']['parking'], sys1['avg_empty']['lfq']]])
    empty = pd.DataFrame(empty)
    empty.columns = empty.iloc[0]
    empty = empty[1:]

    print('Probability of queus being empty\n', empty.to_markdown(),'\n')


def simulation(time):
    t = 1
    q = []
    l = []
    CLOCK = []
    table = []
    while t <= time:
        state, fel, data = starting_state()
        clock = 0

        step = 1
        while len(fel) > 0:
            sorted_fel = sorted(fel, key=lambda x: x['time'])
            event_type = sorted_fel[0]
            clock = event_type['time']
            file = event_type['file']
            event = event_type['event']
            if event == 'arrival in pair':
                arrival_in_pair(fel, state, clock, data, file)
            elif event == 'arrival alone':
                arrival_alone(fel, state, clock, data, file)
            elif event == 'arrival of the other car':
                arrival_of_the_other_car(fel, state, clock, data, file)
            elif event == 'departure from photo shoot':
                departure_from_photo_shoot(fel, state, clock, data, file)
            elif event == 'departure from file opening':
                departure_of_file_opening(fel, state, clock, data, file)
            elif event == 'departure from inspection':
                departure_from_inspection(fel, state, clock, data, file)
            elif event == 'departure from complaining':
                departure_from_complaining(fel, state, clock, data, file)
            elif event == 'departure from file completion':
                file_completion(fel, state, clock, data, file)
            elif event == 'end time':
                end_clock(fel, state, clock, data)
            fel.remove(event_type)
            table.append(create_row(step, event_type, state, data, fel, t))
            step += 1
            #print(sorted_fel)
            #print(state)

        t += 1

        l.append(data)
        CLOCK.append(clock)
    Res = end_of_simulation(l, CLOCK)
    header = create_main_header(state, data, t)
    justify(table)
    create_excel(table, header, t)
    return Res



metrics(simulation(30))

